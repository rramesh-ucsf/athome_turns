%% Read and compile all Rover MPGAs for specified subject

rover_stack = rover_report('RCS_05');

%% Load in and visualize an aligned RC+S-Rover file 

% RCS05_Rover_RCS_020923_01 is a good, short (~7min) recording
post_align_struct = post_align('/Volumes/dwang3_shared/Patient Data/RC+S Data/gait_RCS_05/Rover/Data/Aligned Data/RCS05_Rover_RCS_020923_01.mat',1);

%% Label the heading information and visualize 

labeled_struct = label_rover_heading(post_align_struct, rover_stack);

figure();
ax(1) = subplot(211);
plot(labeled_struct.l_rover.NewTime, labeled_struct.l_rover.LinearAccelX,'Color','black');
xlabel('Time (ms)')
ylabel('Acceleration (a.u.)')
title('Left Rover Acceleration Signal')
ax(2) = subplot(212);
plot(labeled_struct.l_gait.NewTime,labeled_struct.l_gait.Heading,Color='black');
hold on
scatter(labeled_struct.l_gait.NewTime,labeled_struct.l_gait.Heading,'filled','ColorVariable','red');
xlabel('Time (ms)')
ylabel('Heading (Â°)')
title('Left Rover Heading Signal')
linkaxes(ax, 'x')


%% Clean the heading signal and visualize the results 

zero_interv = 2500; % Continuous strings of zeros greater than this many ms will be removed and interpolated
smooth_interv = 1000; % Heading signal will be smoothed using moving average over this many ms 

cleaned_struct = clean_heading(labeled_struct, zero_interv, smooth_interv);

%% Identify turns vs straight walking 

%% GUI Playground - build an interface that lets you QC the turns and straight walking labeling

test = labeled_struct;

ms = 5*1000;
num_periods = ceil(test.l_gait.NewTime(end)/ms);

test.l_gait_periods = table();
test.l_gait_periods = addvars(test.l_gait_periods,[0:ms:ms*(num_periods-1)]','NewVariableNames','NewTime_start');
test.l_gait_periods = addvars(test.l_gait_periods,[ms:ms:(ms*num_periods)]','NewVariableNames','NewTime_end');
test.l_gait_periods.NewTime_end(end) = test.l_gait.NewTime(end);
test.l_gait_periods = addvars(test.l_gait_periods,zeros(num_periods,1),'NewVariableNames','Gait');

figure();
plot(test.l_rover.NewTime, test.l_rover.LinearAccelX,'Color','black');
xlabel('Time (ms)')
ylabel('Acceleration (a.u.)')
title('Left Rover Acceleration Signal')
hold on 
for i = 1:size(test.l_gait_periods,1)
    x = test.l_gait_periods.NewTime_start(i);
    y = min(test.l_rover.LinearAccelX);
    height = max(test.l_rover.LinearAccelX) - min(test.l_rover.LinearAccelX);

    width = test.l_gait_periods.NewTime_end(i)-test.l_gait_periods.NewTime_start(i);
    height = max(abs(test.l_rover.LinearAccelX));
    if test.l_gait_periods.Gait(i) == 1
        rectangle('Position',[x,y,width,height],'FaceColor',[0, 1, 0, 0.1],'EdgeColor','none');
    elseif test.l_gait_periods.Gait(i) == 0
        rectangle('Position',[x,y,width,height],'FaceColor',[1, 0, 0, 0.1],'EdgeColor','none');
    end
end



